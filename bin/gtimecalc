#!/usr/bin/env python3

import os
import sys
import gettext
import locale


if hasattr(sys, 'frozen') and os.name == 'nt':
    # If the Python libs was not packed in a ZIP archive (cx_Freeze
    # doesn't do this by default since version 5), we should extend
    # the PATH manually so gi/_gi.pyd will see the DLLs.
    os.environ['PATH'] += os.pathsep + os.path.dirname(sys.executable)


import gi
gi.require_version('Gtk', '3.0')
gi.require_version('GLib', '2.0')
from gi.repository import Gtk, GLib


if os.name != 'nt':
    PREFIX = os.path.join(os.sep, 'usr', 'share')
else:
    if hasattr(sys, 'frozen'):
        # On Windows, Gtk/Glib search for data in the executable's
        # directory. We should do the same for Python's gettext.
        PREFIX = os.path.join(os.path.dirname(sys.executable), 'share')
    else:
        PREFIX = ''


if not hasattr(sys, 'frozen'):
    # Support running uninstalled
    path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    if os.path.isdir(os.path.join(path, 'gtimecalc')):
        sys.path.insert(1, path)
        Gtk.IconTheme.get_default().prepend_search_path(
            os.path.join(path, 'data', 'icons'))
    else:
        sys.path.insert(1, PREFIX)


from gtimecalc import app_info

if os.name == 'nt':
    # bindtextdomain() depends on environment variables usually not
    # set on Windows, so we have to set LANG manually.
    # First try to detect the UI language via Window's API, then fall
    # back to getdefaultlocale().
    # See https://stackoverflow.com/a/25691701.

    import ctypes
    lang_id = ctypes.windll.kernel32.GetUserDefaultUILanguage()
    lang = locale.windows_locale.get(lang_id, locale.getdefaultlocale()[0])

    if lang is not None:
        os.environ.setdefault('LANG', lang)

gettext.bindtextdomain(app_info.NAME, os.path.join(PREFIX, 'locale'))
gettext.textdomain(app_info.NAME)


from gtimecalc.gtimecalc import TimeCalc

calc = TimeCalc()

if os.name != 'nt':
    import signal
    GLib.unix_signal_add(GLib.PRIORITY_HIGH, signal.SIGTERM, calc.quit)
    GLib.unix_signal_add(GLib.PRIORITY_HIGH, signal.SIGINT, calc.quit)

sys.exit(calc.run(sys.argv))
